/**
 * An After Effects script for generating JavaScript from object properties.
 * v2
 */

// Copyright Â© 2020, Arlo Emerson
// arloemerson@gmail.com

/*
    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

#include './__common.jsx'; // includes polyfills and common functions

app.beginUndoGroup('work_undo');

/**
 * Function with inner main function. Invoked at bottom of this file.
 * Constructs a string of JavaScript based on properties of layerToFind.
 */
var capturePropertyValuesFromComps = function() {
    return {
        arrSelectedComps: getSelectedComps(),
        main: function(layerToFind) {
            var tmpFile = new File('./prop_vals.txt'); // writes a file to same location as this script
            var txtContents = '';
            txtContents += '///////////////////// BEGIN AUTO-GENERATED CODE /////////////////////';
            txtContents += newLine;
            txtContents += '// this block generated by "__generate_javascript_from_captured_properties_v2.jsx"';
            txtContents += newLine;
            tmpFile.open('w');
            var selectedComp;

            for (var k = this.arrSelectedComps.length - 1; k >= 0; k--) {
                selectedComp = this.arrSelectedComps[k];
                var layer;
                // loop layers, find the target layer
                for (var j = 1; j <= selectedComp.layers.length; j++) {
                    if (selectedComp.layers[j].name.indexOf(layerToFind) !== -1) {
                        layer = selectedComp.layers[j];

                        // determine what comp size we are in
                        if (selectedComp.name.indexOf('120x600') > -1) {
                            txtContents += newLine;
                            txtContents += 'if (selectedComp.name.indexOf(\'120x600\') > -1) {';
                            txtContents += getCodeBlock(layer);
                        } else if (selectedComp.name.indexOf('160x600') > -1) {
                            txtContents += newLine;
                            txtContents += '} else if (selectedComp.name.indexOf(\'160x600\') > -1) {';
                            txtContents += getCodeBlock(layer);
                        } else if (selectedComp.name.indexOf('300x250') > -1) {
                            txtContents += newLine;
                            txtContents += '} else if (selectedComp.name.indexOf(\'300x250\') > -1) {';
                            txtContents += getCodeBlock(layer);
                        } else if (selectedComp.name.indexOf('300x600') > -1) {
                            txtContents += newLine;
                            txtContents += '} else if (selectedComp.name.indexOf(\'300x600\') > -1) {';
                            txtContents += getCodeBlock(layer);
                        } else if (selectedComp.name.indexOf('320x480') > -1) {
                            txtContents += newLine;
                            txtContents += '} else if (selectedComp.name.indexOf(\'320x480\') > -1) {';
                            txtContents += getCodeBlock(layer);
                        } else if (selectedComp.name.indexOf('336x280') > -1) {
                            txtContents += newLine;
                            txtContents += '} else if (selectedComp.name.indexOf(\'336x280\') > -1) {';
                            txtContents += getCodeBlock(layer);
                        } else if (selectedComp.name.indexOf('320x100') > -1) {
                            txtContents += newLine;
                            txtContents += '} else if (selectedComp.name.indexOf(\'320x100\') > -1) {';
                            txtContents += getCodeBlock(layer);
                        } else if (selectedComp.name.indexOf('480x320') > -1) {
                            txtContents += newLine;
                            txtContents += '} else if (selectedComp.name.indexOf(\'480x320\') > -1) {';
                            txtContents += getCodeBlock(layer);
                        } else if (selectedComp.name.indexOf('970x250') > -1) {
                            txtContents += newLine;
                            txtContents += '} else if (selectedComp.name.indexOf(\'970x250\') > -1) {';
                            txtContents += getCodeBlock(layer);
                            txtContents += newLine;
                            txtContents += '}'; // close the entire statement
                        }
                    }
                }
            }
            // write out the contents and close
            txtContents += newLine;
            txtContents += '///////////////////// END AUTO-GENERATED CODE /////////////////////';
            tmpFile.write(txtContents);
            tmpFile.close();
            aalert('Done.');
        }
    };
};

function getCodeBlock(layer) {
    var txtContents = newLine;
    txtContents += 'newX = ' + layer.position.value[0] + ';';
    txtContents += newLine;
    txtContents += 'newY = ' + layer.position.value[1] + ';';
    txtContents += newLine;
    txtContents += 'newScale = [' + layer.scale.value.toString() + '];';
    return txtContents;
}

/**
 * Anything to be passed to the script's main method is set here.
 */
var vars = {
    layerNameToFind: 'gradient_overlay'
};

/**
 * Runs the script.
 * Calls main and passes args (if any).
 */
capturePropertyValuesFromComps().main(vars.layerNameToFind);

app.endUndoGroup();
