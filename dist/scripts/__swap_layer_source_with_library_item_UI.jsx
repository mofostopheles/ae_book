/** * An After Effects script with UI for replacing a layer source with a library item. */// Copyright Â© 2020, Arlo Emerson// arloemerson@gmail.com/*    This program is free software: you can redistribute it and/or modify    it under the terms of the GNU Lesser General Public License as published by    the Free Software Foundation, either version 3 of the License, or    (at your option) any later version.    This program is distributed in the hope that it will be useful,    but WITHOUT ANY WARRANTY; without even the implied warranty of    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the    GNU Lesser General Public License for more details.    You should have received a copy of the GNU Lesser General Public License    along with this program.  If not, see <https://www.gnu.org/licenses/>.*/// #include './__common.jsx';/** * Function with inner main function. Invoked at bottom of this file. * UI with calls to swap a collection of comps' layer sources with * something from the project library. */var swapLayerSourceWithLibraryItem = function() {    var WINDOW_TITLE = 'Swap layer source with library item';    var LABEL_COMP_REPLACEMENT_NAME = 'The comp name that will replace the above layer:';    var LABEL_SWAP_BUTTON = 'Swap layer with comp';    return {        /**         * 'that' is the 'this' context, set accordingly at bottom of this file depending         * on if this is a object panel or non-modal window.         */        main: function(that) {            var displayObject = (that instanceof Panel) ? that : new Window('palette', WINDOW_TITLE);            displayObject.spacing = 0;            displayObject.margins = 20;            var groupContainer = displayObject.add('group');            groupContainer.name = 'groupContainer';            groupContainer.orientation = 'column';            groupContainer.alignment = ['fill', 'fill'];            groupContainer.alignChildren = ['left', 'top'];            groupContainer.spacing = 15;            groupContainer.margins = [0, 0, 0, 0];            var groupRow1 = groupContainer.add('group');            groupRow1.alignment = ['fill', 'top'];            var ddlLayerToSwap = groupRow1.add('dropdownlist');            ddlLayerToSwap.text = '';            ddlLayerToSwap.characters = 30;            ddlLayerToSwap.alignment = ['fill', 'center'];            var refreshLayersButton = groupRow1.add('button');            refreshLayersButton.text = 'Refresh';            refreshLayersButton.alignment = ['right', 'center'];            refreshLayersButton.preferredSize = [100, 20];            var groupRow2 = groupContainer.add('group');            groupRow2.alignment = ['fill', 'top'];            var lblCompToSwap = groupRow2.add('statictext');            lblCompToSwap.text = LABEL_COMP_REPLACEMENT_NAME;            lblCompToSwap.alignment = ['left', 'center'];            var ddlCompToSwap = groupRow2.add('dropdownlist');            ddlCompToSwap.text = '';            ddlCompToSwap.characters = 30;            ddlCompToSwap.alignment = ['fill', 'center'];            var groupRow3 = groupContainer.add('group');            groupRow3.alignment = ['fill', 'top'];            var lblStatus = groupRow3.add('statictext');            lblStatus.text = '';            lblStatus.alignment = ['left', 'center'];            lblStatus.preferredSize = [500, 20];            var groupRow4 = groupContainer.add('group');            groupRow4.alignment = ['fill', 'top'];            var cancelButton = groupRow4.add('button');            cancelButton.text = 'Cancel';            cancelButton.alignment = ['fill', 'center'];            var swapButton = groupRow4.add('button');            swapButton.text = LABEL_SWAP_BUTTON;            swapButton.alignment = ['fill', 'center'];            cancelButton.onClick = function() {                displayObject.close(0);            };            swapButton.onClick = function() {                swapItems(ddlLayerToSwap, ddlCompToSwap, lblStatus);            };            refreshLayersButton.onClick = function() {                lblStatus.text = '';                populateLayerList(ddlLayerToSwap);            };            ddlCompToSwap.onChange = function() {                lblStatus.text = '';            };            ddlLayerToSwap.onChange = function() {                lblStatus.text = '';            };            populateLayerList(ddlLayerToSwap);            populateComdropdownList(ddlCompToSwap);            if (getSelectedComps().length === 0) {                lblStatus.text = '** Please select a comp and click the Refresh button.';            }            displayObject.layout.layout(true);            return displayObject;        }    };};/** * Builds a dropdown list from all comps. * Note this can be filtered based on name or other attribute. */function populateComdropdownList(dropdownList) {    dropdownList.removeAll();    var allComps = app.project.items;    var item;    for (var i = allComps.length; i >= 1; i--) {        item = allComps[i];        // Note: we can filter on the comp name...        // if ( (item instanceof CompItem) && (item.name.toLowerCase().indexOf('ui_') > -1)  )        if (item instanceof CompItem) {            dropdownList.add('item', item.name);        }    }}/** * Loop the layers of the first selected comp and use that as our list of layers to choose from. */function populateLayerList(dropdownList) {    dropdownList.removeAll();    var arrSelectedComps = getSelectedComps();    if (arrSelectedComps.length >= 1) {        /**         * firstComp is the first comp in selected comps array.         * This is the achilles of this script because we're only using         * the first comp to get our layer names.         * Hope it has the layers you want to use.         */        var firstComp = arrSelectedComps[0];        for (var j = 1; j <= firstComp.layers.length; j++) {            if (firstComp.layers[j].source != null) {                dropdownList.add('item', firstComp.layers[j].source.name);            }        }    }}function swapItems(dropdownList1, dropdownList2, listText) {    app.beginUndoGroup('swap_items');    var arrSelectedComps = getSelectedComps();    if (arrSelectedComps.length === 0) {        listText.text = '** Please select a comp and click the Refresh button.';        return;    }    var layerNameToReplace;    var strReplacementComp;    var statusReport = '';    var counter = 0;    if (dropdownList1.selection == null) {        listText.text = '** Please select an item from the layer list.';        return;    } else if (dropdownList2.selection == null) {        listText.text = '** Please select an item from the comp list.';        return;    } else {        layerNameToReplace = dropdownList1.selection.text;        strReplacementComp = dropdownList2.selection.text;    }    if (arrSelectedComps.length >= 1) {        var replacementComp;        var selectedComp;        var ableToReplace;        for (var k = 0; k < arrSelectedComps.length; k++) {            replacementComp = getComp(strReplacementComp);            selectedComp = arrSelectedComps[k];            ableToReplace = false;            // try to find the layer by looping the comp's layer collection            for (var j = 1; j <= selectedComp.layers.length; j++) {                if (selectedComp.layers[j].source != null) {                    if (selectedComp.layers[j].source.name.indexOf(layerNameToReplace) !== -1) {                        selectedComp.layers[j].replaceSource(replacementComp, false);                        selectedComp.layers[j].name = replacementComp.name;                        ableToReplace = true;                        counter++;                    }                }            }            if (ableToReplace === false) {                listText.text = '**Couldn\'t find a layer in ' + selectedComp.name + ' with name "' + layerNameToReplace + '"';            } else {                statusReport += '\n\n' + selectedComp.name + ' - replaced "' + layerNameToReplace + '" with "' + strReplacementComp + '"';            }        }    } else {        listText.text = '** Please select at least one comp.';    }    listText.text = 'Made ' + counter + ' replacement/s. \n' + statusReport;    app.endUndoGroup();}/** * Runs the script. * Calls main and passes args (if any). */var displayObject = swapLayerSourceWithLibraryItem().main(this);/** * Logic for displaying either a panel or non modal window. */if (displayObject.toString() === '[object Panel]') {    displayObject;} else {    displayObject.show();}