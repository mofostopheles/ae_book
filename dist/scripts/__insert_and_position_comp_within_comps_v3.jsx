// __insert_and_position_comp_within_comps_v3.jsx

// Copyright © 2019, Arlo Emerson
// arloemerson@gmail.com

/*
    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

// Run this script from the command line with:
// AfterFX -r X:\path_to_book\__insert_and_position_comp_within_comps_v3.jsx
// Note: You first might need to add AfterFX to your computer's path variable.
var insertAndPositionCompWithinComps = function() {
    app.beginUndoGroup("work_undo");

    return {
        arrSelectedComps: getSelectedComps(),
        main: function(pCompToPlace) {
            if (pCompToPlace == "") {
                aalert("Need a comp name for this to work.")
                return;
            }

            var compsChangedCounter = 0;
            for (var k = 0; k < this.arrSelectedComps.length; k++) {
                var selectedComp = this.arrSelectedComps[k];
                var ableToUpdate = false;

                if (compNeedsUpdate(selectedComp, pCompToPlace)) {

                    var newLayer = selectedComp.layers.add(getComp(pCompToPlace));
                    newLayer.threeDLayer = false;
                    newLayer.blendingMode = BlendingMode.MULTIPLY;
                    newLayer.label = 5;

                    var newX = 0;
                    var newY = 0;
                    var newScale = 0;

                    ///////////////////// BEGIN AUTO-GENERATED CODE /////////////////////
                    // this block generated by '__generate_javascript_from_captured_properties_v2.jsx'

                    if (selectedComp.name.indexOf("120x600") > -1) {
                        newX = 120;
                        newY = 92.75;
                        newScale = [26.0937004089356, 59.2187004089355, 100];
                    } else if (selectedComp.name.indexOf("160x600") > -1) {
                        newX = 160;
                        newY = 103;
                        newScale = [34.7916679382324, 68.75, 100];
                    } else if (selectedComp.name.indexOf("300x250") > -1) {
                        newX = 303;
                        newY = 129;
                        newScale = [64.375, 83.125, 100];
                    } else if (selectedComp.name.indexOf("300x600") > -1) {
                        newX = 297;
                        newY = 171.375;
                        newScale = [67.916633605957, 114.583297729492, 100];
                    } else if (selectedComp.name.indexOf("320x100") > -1) {
                        newX = 316;
                        newY = 48;
                        newScale = [68.8333358764648, 36.75, 100];
                    } else if (selectedComp.name.indexOf("320x480") > -1) {
                        newX = 319;
                        newY = 152.5;
                        newScale = [70.3125, 109.0625, 100];
                    } else if (selectedComp.name.indexOf("336x280") > -1) {
                        newX = 331;
                        newY = 99.625;
                        newScale = [72.2396011352539, 68.4896011352539, 100];
                    } else if (selectedComp.name.indexOf("480x320") > -1) {
                        newX = 472.25;
                        newY = 121;
                        newScale = [104.791664123535, 83.125, 100];
                    } else if (selectedComp.name.indexOf("970x250") > -1) {
                        newX = 969.451263427734;
                        newY = 105.345900774002;
                        newScale = [203.291401570543, 71.6863208126056, 100];
                    }
                    ///////////////////// END AUTO-GENERATED CODE /////////////////////

                    // update the newly added layer...
                    newLayer.position.setValue([newX, newY]);
                    newLayer.scale.setValue(newScale);

                    ableToUpdate = true;
                    compsChangedCounter++;
                }
            }

            aalert(compsChangedCounter + " comp/s total touched.");
        },
    }

    app.endUndoGroup();
};

function compNeedsUpdate(pSelectedComp, pCompToPlace) {
    //if pCompToPlace exists, return false
    for (var j = 1; j <= pSelectedComp.layers.length; j++) {
        if (pSelectedComp.layers[j].name.indexOf(pCompToPlace) > -1) {
            return false;
        }
    }

    return true;
}

// *************************************************************************
// **************************** HELPER METHODS *****************************
// *************************************************************************

var getSelectedComps = function() {
    var arrSelectedComps = new Array();
    for (var i = app.project.items.length; i >= 1; i--) {
        item = app.project.items[i];
        if ((item instanceof CompItem) && item.selected) {
            arrSelectedComps[arrSelectedComps.length] = item;
        }
    }

    if (arrSelectedComps.length < 1) {
        aalert("Please select at least one comp.");
    }
    return arrSelectedComps;
}

var getComp = function(pCompName) {
    for (var i = 1; i <= app.project.numItems; i++) {
        if ((app.project.item(i) instanceof CompItem) && (app.project.item(i).name == pCompName)) {
            return app.project.item(i);
        }
    }
    return null;
}

function aalert(pArg) {
    if (verbose) {
        alert(pArg);
    }
}

// *************************************************************************
// ************************* USER DEFINED VARIABLES ************************
// *************************************************************************
var verbose = true; // Set to false to silence alerts.
var vars = {
    compToPlace: "gradient_overlay", // Comp name to insert in selected comps.
}

// *************************************************************************
// **************************** FUNCTION CALL ******************************
// *************************************************************************
insertAndPositionCompWithinComps().main(vars.compToPlace);