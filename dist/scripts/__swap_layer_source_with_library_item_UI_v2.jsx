/** * An After Effects script with UI for replacing a layer source with a library item. * v2 */// Copyright © 2019, Arlo Emerson// arloemerson@gmail.com/*    This program is free software: you can redistribute it and/or modify    it under the terms of the GNU Lesser General Public License as published by    the Free Software Foundation, either version 3 of the License, or    (at your option) any later version.    This program is distributed in the hope that it will be useful,    but WITHOUT ANY WARRANTY; without even the implied warranty of    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the    GNU Lesser General Public License for more details.    You should have received a copy of the GNU Lesser General Public License    along with this program.  If not, see <https://www.gnu.org/licenses/>.*//** * Function with inner main function. Invoked at bottom of this file. * UI with calls to swap a collection of comps' layer sources with * something from the project library. */var swapLayerSourceWithLibraryItem = function() {    var WINDOW_TITLE = "Swap layer source with library item";    var LABEL_LAYER_SOURCE_NAME = "The layer source name you want to replace:";    var LABEL_COMP_REPLACEMENT_NAME = "The comp name that will replace the above layer:";    var LABEL_SWAP_BUTTON = "Swap layer with comp";    return {        /**         * pThis is the 'this' context, set accordingly at bottom of this file depending          * on if this is a object panel or non-modal window.         */        main: function(pThis) {            var displayObject = (pThis instanceof Panel) ? pThis : new Window('palette', WINDOW_TITLE);            displayObject.spacing = 0;            displayObject.margins = 20;            var groupContainer = displayObject.add("group");            groupContainer.name = "groupContainer";            groupContainer.orientation = 'column';            groupContainer.alignment = ['fill', 'fill'];            groupContainer.alignChildren = ['left', 'top'];            groupContainer.spacing = 15;            groupContainer.margins = [0, 0, 0, 0];            var groupRow1 = groupContainer.add("group");            groupRow1.alignment = ['fill', 'top'];            var ddlSourceOrLayerName = groupRow1.add("dropdownlist");            ddlSourceOrLayerName.text = '';            ddlSourceOrLayerName.characters = 30;            ddlSourceOrLayerName.alignment = ['fill', 'center'];            ddlSourceOrLayerName.add('item', "The layer name you want to replace");            ddlSourceOrLayerName.add('item', "The source name you want to replace");            var ddlLayerToSwap = groupRow1.add("dropdownlist");            ddlLayerToSwap.text = '';            ddlLayerToSwap.characters = 30;            ddlLayerToSwap.alignment = ['fill', 'center'];            var refreshLayersButton = groupRow1.add("button");            refreshLayersButton.text = 'Refresh';            refreshLayersButton.alignment = ['right', 'center'];            refreshLayersButton.preferredSize = [100, 20];            var groupRow2 = groupContainer.add("group");            groupRow2.alignment = ['fill', 'top'];            var lblCompToSwap = groupRow2.add("statictext");            lblCompToSwap.text = LABEL_COMP_REPLACEMENT_NAME;            lblCompToSwap.alignment = ['left', 'center'];            var ddlCompToSwap = groupRow2.add("dropdownlist");            ddlCompToSwap.text = '';            ddlCompToSwap.characters = 30;            ddlCompToSwap.alignment = ['fill', 'center'];            var groupRow3 = groupContainer.add("group");            groupRow3.alignment = ['fill', 'top'];            var lblStatus = groupRow3.add("statictext");            lblStatus.text = "";            lblStatus.alignment = ['left', 'center'];            lblStatus.preferredSize = [500, 20];            var groupRow4 = groupContainer.add("group");            groupRow4.alignment = ['fill', 'top'];            var cancelButton = groupRow4.add("button");            cancelButton.text = 'Cancel';            cancelButton.alignment = ['fill', 'center'];            var swapButton = groupRow4.add("button");            swapButton.text = LABEL_SWAP_BUTTON;            swapButton.alignment = ['fill', 'center'];            cancelButton.onClick = function() {                displayObject.close(0);            };            swapButton.onClick = function() {                swapItems(ddlLayerToSwap, ddlCompToSwap, lblStatus, ddlSourceOrLayerName);            };            refreshLayersButton.onClick = function() {                lblStatus.text = "";                populateLayerList(ddlLayerToSwap, ddlSourceOrLayerName);            };            ddlCompToSwap.onChange = function() {                lblStatus.text = "";            }            ddlLayerToSwap.onChange = function() {                lblStatus.text = "";            }            ddlSourceOrLayerName.onChange = function() {                populateLayerList(ddlLayerToSwap, ddlSourceOrLayerName);            }            populateLayerList(ddlLayerToSwap, ddlSourceOrLayerName);            populateCompList(ddlCompToSwap);            if (getSelectedComps().length == 0) {                lblStatus.text = "** Please select a comp and click the Refresh button.";            }            displayObject.layout.layout(true);            return displayObject;        },    }};/** * Builds a dropdown list from all comps.  * Note this can be filtered based on name or other attribute. */function populateCompList(pList) {    pList.removeAll();    var allComps = app.project.items;    for (var i = allComps.length; i >= 1; i--) {        item = allComps[i];        // Note: we can filter on the comp name...        // if ( (item instanceof CompItem) && (item.name.toLowerCase().indexOf("ui_") > -1)  )        if (item instanceof CompItem) {            pList.add('item', item.name);        }    }}/** * Loop the layers of the first selected comp and use that as our list of layers to choose from. */function populateLayerList(pList, pSourceOrLayerNameList) {    pList.removeAll();    var arrSelectedComps = getSelectedComps();    if (arrSelectedComps.length >= 1) {        /**         * firstComp is the first comp in selected comps array.         * This is the achilles of this script because we're only using          * the first comp to get our layer names.          * Hope it has the layers you want to use.         */        var firstComp = arrSelectedComps[0];        for (var j = 1; j <= firstComp.layers.length; j++) {            if (firstComp.layers[j].source != null) //layer must have a source            {                if (pSourceOrLayerNameList.selection != null) {                    if (pSourceOrLayerNameList.selection.index == 0) { // by layer name                        pList.add('item', firstComp.layers[j].name);                    } else if (pSourceOrLayerNameList.selection.index == 1) { // by source name                        pList.add('item', firstComp.layers[j].source.name);                    }                }            }        }    }}/** * The actual swapping of comps happens here. * pList1 The list of layers. * pList2 The list of comps. * pText Status and error messages in the UI. * pSourceOrLayerNameList The two-choice list for filtering on source or layer name. */function swapItems(pList1, pList2, pText, pSourceOrLayerNameList) {    app.beginUndoGroup("swap_items");    var arrSelectedComps = getSelectedComps();    if (arrSelectedComps.length == 0) {        pText.text = "** Please select a comp and click the Refresh button.";        return;    }    var layerNameToReplace    var strReplacementComp    var statusReport = "";    var counter = 0;    if (pList1.selection == null) {        pText.text = "** Please select an item from the layer list.";        return;    } else if (pList2.selection == null) {        pText.text = "** Please select an item from the comp list.";        return;    } else {        layerNameToReplace = pList1.selection.text;        strReplacementComp = pList2.selection.text;    }    if (arrSelectedComps.length >= 1) {        for (var k = 0; k < arrSelectedComps.length; k++) {            var replacementComp = getComp(strReplacementComp);            var selectedComp = arrSelectedComps[k];            var ableToReplace = false;            // try to find the layer by looping the comp's layer collection            for (var j = 1; j <= selectedComp.layers.length; j++) {                if (selectedComp.layers[j].source != null) // layer must have a source                {                    if (pSourceOrLayerNameList.selection != null) {                        if (pSourceOrLayerNameList.selection.index == 0) {                            if (selectedComp.layers[j].name.indexOf(layerNameToReplace) != -1) {                                selectedComp.layers[j].replaceSource(replacementComp, false);                                selectedComp.layers[j].name = replacementComp.name;                                ableToReplace = true;                                counter++;                            }                        } else if (pSourceOrLayerNameList.selection.index == 1) {                            if (selectedComp.layers[j].source.name.indexOf(layerNameToReplace) != -1) {                                selectedComp.layers[j].replaceSource(replacementComp, false);                                selectedComp.layers[j].name = replacementComp.name;                                ableToReplace = true;                                counter++;                            }                        }                    }                }            }            if (ableToReplace == false) {                pText.text = "**Couldn't find a layer in " + selectedComp.name + " with name '" + layerNameToReplace + "'";            } else {                statusReport += "\n\n" + selectedComp.name + " - replaced '" + layerNameToReplace + "'' with '" + strReplacementComp + "'";            }        }    } else {        pText.text = "** Please select at least one comp.";    }    pText.text = "Made " + counter + " replacement/s. \n" + statusReport;    app.endUndoGroup();}// *************************************************************************// **************************** HELPER METHODS *****************************// *************************************************************************/** * Returns a comp or null. */function getComp(pName) {    for (var i = 1; i <= app.project.numItems; i++) {        if ((app.project.item(i) instanceof CompItem) && (app.project.item(i).name == pName)) {            return app.project.item(i);        }    }    return null;}/** * Returns an array of selected comps. */var getSelectedComps = function() {    var arrSelectedComps = new Array();    for (var i = app.project.items.length; i >= 1; i--) {        item = app.project.items[i];        if ((item instanceof CompItem) && item.selected) {            arrSelectedComps[arrSelectedComps.length] = item;        }    }    if (arrSelectedComps.length < 1) {        aalert("Please select at least one comp.");    }    return arrSelectedComps;};/** * Wraps an alert with verbose flag. */function aalert(pArg) {    if (verbose) {        alert(pArg);    }}// *************************************************************************// ************************* USER DEFINED VARIABLES ************************// *************************************************************************var verbose = true; // Set to false to silence alerts.// *************************************************************************// **************************** FUNCTION CALL ******************************// *************************************************************************var displayObject = swapLayerSourceWithLibraryItem().main(this);// Logic for displaying either a panel or non modal windowif (displayObject.toString() == "[object Panel]") {    displayObject;} else {    displayObject.show();}